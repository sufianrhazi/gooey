import { Calculation, Model, Collection } from './types';
export { setLogLevel } from './log';
import { createElement } from './view';
export { Fragment, mount } from './view';
export { Component } from './jsx';
export { ref, Ref, InvariantError, Calculation, Collection, Model, OnCollectionRelease, } from './types';
export default createElement;
export declare const VERSION = "development";
export declare function reset(): void;
export declare function name<T>(item: T, name: string): T;
export declare function model<T extends {}>(obj: T): Model<T>;
export declare function collection<T>(array: T[]): Collection<T>;
export declare function calc<Ret>(func: () => Ret): Calculation<Ret>;
export declare function effect(func: () => void): Calculation<void>;
declare type Listener = () => void;
export declare function subscribe(listener: Listener): () => void;
export declare function flush(): void;
export declare function retain(item: Calculation<any> | Collection<any>): void;
export declare function release(item: Calculation<any> | Collection<any>): void;
export declare function debug(): string;
//# sourceMappingURL=index.d.ts.map