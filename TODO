Current theme - memory management:
[ ] Write a bunch of tests to confirm retain / release refcounting is sound (i.e. a component (that creates state, has a calculation, changes some content on click) is mounted, clicked, and then unmounted, the resulting graph is empty)
[ ] Confirm all demos are working as expected
  - garbage-test throws exceptions (looks like a calculation use after free/release in the debug graph?)
  - form-inputs auto-scroll does not work; did the ordering of effects regress?
  - perf comparison
[ ] Move id issuance into the graph; allow for reissuing ids (to keep the topological ordered list compact)

Next up:
[ ] Finish the design doc
[ ] Go through the design and correct the identified design flaws
[ ] Go through the codebase and address all the TODOs

Unprioritized:
[ ] Build demonstration UI for the 7 GUIs: https://eugenkiss.github.io/7guis/
[ ] Model: We have model.keys, do we need model.values and model.entries?
[ ] Model: Ergonomics/efficiency around derived models? Or is calc(() => model({ val: derived.val })) good enough?
[ ] View: change the component/context API so that reparenting can re-read context values

Future:
[ ] View: Portals; do they make sense? Do we need event hijacking for them to be useful?
[ ] View: Build a demo with web components / custom elements powered by gooey
[ ] View: Consider the pros/cons of the style prop as a string / object

Done:
[x] View: Allow for reparenting of a DOM subtree?
[x] Collection: Make .sort work + add new 'sort' event
[x] View: Add a Context.Provider equivalent
[x] View: Guarantee ordering of onEffect() to be after all mounted calc()s within a component
[x] Tracked Data: Fix notify ordering bug (see comment in notify()) 
[x] DAG/Core: Perform GC at the same pass as processing; only visit nodes that have a directed path to a retained node; dirtied but visitable nodes that do not have a directed path to a retained node could either live as-is, or they could be GCd (maybe less often?)
[x] View: Revisit how attr*, makeAttrValue, and makeIdlValue work; How to reduce the amount of data structures? How to ensure unexpected values are handled correctly?
[x] Export a debug build so we can debug things developed separately
